Subject: [PATCH] added project-level cursor rules
---
Index: app/src/main/java/com/giftideaminder/data/model/AppDatabase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/giftideaminder/data/model/AppDatabase.kt b/app/src/main/java/com/giftideaminder/data/model/AppDatabase.kt
--- a/app/src/main/java/com/giftideaminder/data/model/AppDatabase.kt	(revision 1a7adc79abbd862ae88f716370f88946d1eb9259)
+++ b/app/src/main/java/com/giftideaminder/data/model/AppDatabase.kt	(date 1754766614983)
@@ -11,7 +11,7 @@

 @Database(
     entities = [Gift::class, Person::class, PriceRecord::class, Suggestion::class, Settings::class],
-    version = 2,
+    version = 3,
     exportSchema = false
 )
 @TypeConverters(Converters::class)
Index: app/src/main/java/com/giftideaminder/data/repository/PersonRoleQueries.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/giftideaminder/data/repository/PersonRoleQueries.kt b/app/src/main/java/com/giftideaminder/data/repository/PersonRoleQueries.kt
new file mode 100644
--- /dev/null	(date 1754766557764)
+++ b/app/src/main/java/com/giftideaminder/data/repository/PersonRoleQueries.kt	(date 1754766557764)
@@ -0,0 +1,85 @@
+package com.giftideaminder.data.repository
+
+import com.giftideaminder.data.model.Person
+import com.giftideaminder.data.model.PersonRole
+
+/**
+ * Sample queries demonstrating role-based filtering
+ */
+class PersonRoleQueries {
+
+    companion object {
+        /**
+         * Sample usage of role-based queries in your repository or ViewModel
+         */
+        suspend fun getSampleQueries(personRepository: PersonRepository): Map<String, List<Person>> {
+            return mapOf(
+                "All Giftees" to personRepository.getPeopleWithRole(PersonRole.GIFTEE.bit),
+                "All Gifters" to personRepository.getPeopleWithRole(PersonRole.GIFTER.bit),
+                "Collaborators" to personRepository.getPeopleWithRole(PersonRole.COLLABORATOR.bit),
+                "Contacts Only" to personRepository.getPeopleWithRole(PersonRole.CONTACT_ONLY.bit),
+                "Self" to personRepository.getPeopleWithRole(PersonRole.SELF.bit),
+                // Multiple roles using bitwise OR
+                "Giftees and Gifters" to personRepository.getPeopleWithRole(
+                    PersonRole.GIFTEE.bit or PersonRole.GIFTER.bit
+                ),
+                "Active participants (Giftees, Gifters, Collaborators)" to personRepository.getPeopleWithRole(
+                    PersonRole.GIFTEE.bit or PersonRole.GIFTER.bit or PersonRole.COLLABORATOR.bit
+                )
+            )
+        }
+
+        /**
+         * Helper functions for working with roles in business logic
+         */
+        fun isGiftee(person: Person): Boolean {
+            return PersonRole.Companion.run { person.roles.hasRole(PersonRole.GIFTEE) }
+        }
+
+        fun isGifter(person: Person): Boolean {
+            return PersonRole.Companion.run { person.roles.hasRole(PersonRole.GIFTER) }
+        }
+
+        fun canCollaborate(person: Person): Boolean {
+            return PersonRole.Companion.run {
+                person.roles.hasRole(PersonRole.COLLABORATOR) ||
+                person.roles.hasRole(PersonRole.GIFTER)
+            }
+        }
+
+        fun addGifteeRole(person: Person): Person {
+            return PersonRole.Companion.run {
+                person.copy(roles = person.roles.plusRole(PersonRole.GIFTEE))
+            }
+        }
+
+        fun removeGifteeRole(person: Person): Person {
+            return PersonRole.Companion.run {
+                person.copy(roles = person.roles.minusRole(PersonRole.GIFTEE))
+            }
+        }
+
+        /**
+         * Get people who can receive gifts (have GIFTEE role)
+         */
+        suspend fun getPotentialGiftRecipients(personRepository: PersonRepository): List<Person> {
+            return personRepository.getPeopleWithRole(PersonRole.GIFTEE.bit)
+        }
+
+        /**
+         * Get people who can give gifts (have GIFTER role)
+         */
+        suspend fun getPotentialGiftGivers(personRepository: PersonRepository): List<Person> {
+            return personRepository.getPeopleWithRole(PersonRole.GIFTER.bit)
+        }
+
+        /**
+         * Get people who can help plan gifts (have COLLABORATOR or GIFTER role)
+         */
+        suspend fun getGiftPlanners(personRepository: PersonRepository): List<Person> {
+            return personRepository.getPeopleWithRole(
+                PersonRole.COLLABORATOR.bit or PersonRole.GIFTER.bit
+            )
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/giftideaminder/data/model/PersonRole.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/giftideaminder/data/model/PersonRole.kt b/app/src/main/java/com/giftideaminder/data/model/PersonRole.kt
new file mode 100644
--- /dev/null	(date 1754766557764)
+++ b/app/src/main/java/com/giftideaminder/data/model/PersonRole.kt	(date 1754766557764)
@@ -0,0 +1,25 @@
+package com.giftideaminder.data.model
+
+enum class PersonRole(val bit: Int) {
+    SELF(1),
+    GIFTEE(2),
+    GIFTER(4),
+    COLLABORATOR(8),
+    CONTACT_ONLY(16);
+
+    companion object {
+        fun fromInt(value: Int): Set<PersonRole> {
+            return values().filter { (value and it.bit) != 0 }.toSet()
+        }
+
+        fun toInt(roles: Set<PersonRole>): Int {
+            return roles.sumOf { it.bit }
+        }
+
+        fun Int.hasRole(role: PersonRole): Boolean = (this and role.bit) != 0
+
+        fun Int.plusRole(role: PersonRole): Int = this or role.bit
+
+        fun Int.minusRole(role: PersonRole): Int = this and role.bit.inv()
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/giftideaminder/data/repository/PersonRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/giftideaminder/data/repository/PersonRepository.kt b/app/src/main/java/com/giftideaminder/data/repository/PersonRepository.kt
--- a/app/src/main/java/com/giftideaminder/data/repository/PersonRepository.kt	(revision 1a7adc79abbd862ae88f716370f88946d1eb9259)
+++ b/app/src/main/java/com/giftideaminder/data/repository/PersonRepository.kt	(date 1754766557764)
@@ -20,4 +20,8 @@
     }

     fun getPersonById(id: Int): Flow<Person> = personDao.getPersonById(id)
+
+    suspend fun getPersonByIdSuspend(id: Int): Person? = personDao.getPersonByIdSuspend(id)
+
+    suspend fun getPeopleWithRole(roleBit: Int): List<Person> = personDao.getPeopleWithRole(roleBit)
 }
\ No newline at end of file
Index: app/src/main/java/com/giftideaminder/data/dao/PersonDao.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/giftideaminder/data/dao/PersonDao.kt b/app/src/main/java/com/giftideaminder/data/dao/PersonDao.kt
--- a/app/src/main/java/com/giftideaminder/data/dao/PersonDao.kt	(revision 1a7adc79abbd862ae88f716370f88946d1eb9259)
+++ b/app/src/main/java/com/giftideaminder/data/dao/PersonDao.kt	(date 1754766557764)
@@ -20,4 +20,10 @@

     @Query("SELECT * FROM persons WHERE id = :id")
     fun getPersonById(id: Int): Flow<Person>
+
+    @Query("SELECT * FROM persons WHERE id = :personId LIMIT 1")
+    suspend fun getPersonByIdSuspend(personId: Int): Person?
+
+    @Query("SELECT * FROM persons WHERE (roles & :roleBit) != 0 ORDER BY name ASC")
+    suspend fun getPeopleWithRole(roleBit: Int): List<Person>
 }
Index: app/src/main/java/com/giftideaminder/viewmodel/AddEditGifteeViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/giftideaminder/viewmodel/AddEditGifteeViewModel.kt b/app/src/main/java/com/giftideaminder/viewmodel/AddEditGifteeViewModel.kt
--- a/app/src/main/java/com/giftideaminder/viewmodel/AddEditGifteeViewModel.kt	(revision 1a7adc79abbd862ae88f716370f88946d1eb9259)
+++ b/app/src/main/java/com/giftideaminder/viewmodel/AddEditGifteeViewModel.kt	(date 1754766614983)
@@ -6,6 +6,7 @@
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
 import com.giftideaminder.data.model.Person
+import com.giftideaminder.data.model.PersonRole
 import com.giftideaminder.data.repository.PersonRepository
 import dagger.hilt.android.lifecycle.HiltViewModel
 import kotlinx.coroutines.flow.*
@@ -27,7 +28,8 @@
     val isRelationshipDropdownOpen: Boolean = false,
     val notes: String = "",
     val phoneNumber: String? = null,
-    val showSmsPrompt: Boolean = false
+    val showSmsPrompt: Boolean = false,
+    val roles: Int = PersonRole.GIFTEE.bit
 )

 @HiltViewModel
@@ -44,21 +46,7 @@

     init {
         savedStateHandle.get<Int>("gifteeId")?.let { id ->
-            viewModelScope.launch {
-                personRepo.getPersonById(id).firstOrNull()?.let { person ->
-                    _uiState.update { s ->
-                        s.copy(
-                            isEditing = true,
-                            id = person.id,
-                            photoUri = person.photoUri?.let(Uri::parse),
-                            name = person.name,
-                            eventDate = person.birthday,
-                            relationships = person.relationships,
-                            notes = person.notes ?: ""
-                        )
-                    }
-                }
-            }
+            loadPerson(id)
         }
     }

@@ -133,13 +121,14 @@
             isRelationshipDropdownOpen = false,
             notes = "",
             phoneNumber = null,
-            showSmsPrompt = false
+            showSmsPrompt = false,
+            roles = PersonRole.GIFTEE.bit
         )
     }

     fun loadPerson(personId: Int) {
         viewModelScope.launch {
-            personRepo.getPersonById(personId).firstOrNull()?.let { person ->
+            personRepo.getPersonByIdSuspend(personId)?.let { person ->
                 _uiState.update { s ->
                     s.copy(
                         isEditing = true,
@@ -149,7 +138,8 @@
                         eventDate = person.birthday,
                         relationships = person.relationships,
                         notes = person.notes ?: "",
-                        phoneNumber = person.contactInfo
+                        phoneNumber = person.contactInfo,
+                        roles = person.roles
                     )
                 }
             }
@@ -221,7 +211,8 @@
                 birthday = s.eventDate,
                 relationships = s.relationships,
                 notes = s.notes,
-                contactInfo = s.phoneNumber
+                contactInfo = s.phoneNumber,
+                roles = s.roles
             )

             if (s.isEditing) {
Index: app/src/main/java/com/giftideaminder/ui/screens/AddEditGifteeScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/giftideaminder/ui/screens/AddEditGifteeScreen.kt b/app/src/main/java/com/giftideaminder/ui/screens/AddEditGifteeScreen.kt
--- a/app/src/main/java/com/giftideaminder/ui/screens/AddEditGifteeScreen.kt	(revision 1a7adc79abbd862ae88f716370f88946d1eb9259)
+++ b/app/src/main/java/com/giftideaminder/ui/screens/AddEditGifteeScreen.kt	(date 1754766614983)
@@ -37,6 +37,7 @@
 import java.time.Instant
 import java.time.LocalDate
 import java.time.ZoneId
+import java.time.ZoneOffset
 import java.time.format.DateTimeFormatter
 import java.util.*

@@ -70,12 +71,12 @@
     // Date picker state (keep it synced with uiState after load)
     val datePickerState = rememberDatePickerState(
         initialSelectedDateMillis = uiState.eventDate?.let { date ->
-            date.atStartOfDay(ZoneId.of("UTC")).toInstant().toEpochMilli()
+            date.atStartOfDay(ZoneOffset.UTC).toInstant().toEpochMilli()
         }
     )
     LaunchedEffect(uiState.eventDate) {
         datePickerState.selectedDateMillis = uiState.eventDate?.let { date ->
-            date.atStartOfDay(ZoneId.of("UTC")).toInstant().toEpochMilli()
+            date.atStartOfDay(ZoneOffset.UTC).toInstant().toEpochMilli()
         }
     }

@@ -235,7 +236,7 @@
                     TextButton(onClick = {
                         datePickerState.selectedDateMillis?.let { millis ->
                             val localDate = Instant.ofEpochMilli(millis)
-                                .atZone(ZoneId.of("UTC"))
+                                .atZone(ZoneOffset.UTC)
                                 .toLocalDate()
                             viewModel.onEventDateChange(localDate)
                         }
Index: app/src/main/java/com/giftideaminder/data/model/Person.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/giftideaminder/data/model/Person.kt b/app/src/main/java/com/giftideaminder/data/model/Person.kt
--- a/app/src/main/java/com/giftideaminder/data/model/Person.kt	(revision 1a7adc79abbd862ae88f716370f88946d1eb9259)
+++ b/app/src/main/java/com/giftideaminder/data/model/Person.kt	(date 1754766614983)
@@ -16,5 +16,6 @@
     val notes: String? = null,
     val contactInfo: String? = null,
     val autoAssignFromSMS: Boolean = false,
-    val defaultBudget: Double? = null
+    val defaultBudget: Double? = null,
+    val roles: Int = PersonRole.GIFTEE.bit
 )
